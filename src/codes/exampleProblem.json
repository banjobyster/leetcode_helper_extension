{
    "exampleTestcaseList": "[2,7,11,15]\n9\n[3,2,4]\n6\n[3,3]\n6",
    "metaData": {
        "name": "exampleQuestion",
        "params": [
            {
                "name": "nums",
                "type": "integer[]"
            },
            {
                "name": "target",
                "type": "integer"
            }
        ],
        "return": {
            "type": "integer[]",
            "size": 2
        },
        "manual": false
    },
    "codeSnippets": [
        {
            "code": "class Solution {\npublic:\n    vector<int> exampleQuestion(vector<int>& nums, int target) {\n        \n    }\n};",
            "lang": "C++",
            "langSlug": "cpp"
        },
        {
            "code": "class Solution {\n    public int[] exampleQuestion(int[] nums, int target) {\n        \n    }\n}",
            "lang": "Java",
            "langSlug": "java"
        },
        {
            "code": "class Solution(object):\n    def exampleQuestion(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        ",
            "lang": "Python",
            "langSlug": "python"
        },
        {
            "code": "class Solution:\n    def exampleQuestion(self, nums: List[int], target: int) -> List[int]:\n        ",
            "lang": "Python3",
            "langSlug": "python3"
        },
        {
            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* exampleQuestion(int* nums, int numsSize, int target, int* returnSize) {\n    \n}",
            "lang": "C",
            "langSlug": "c"
        },
        {
            "code": "public class Solution {\n    public int[] exampleQuestion(int[] nums, int target) {\n        \n    }\n}",
            "lang": "C#",
            "langSlug": "csharp"
        },
        {
            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar exampleQuestion = function(nums, target) {\n    \n};",
            "lang": "JavaScript",
            "langSlug": "javascript"
        },
        {
            "code": "function exampleQuestion(nums: number[], target: number): number[] {\n    \n};",
            "lang": "TypeScript",
            "langSlug": "typescript"
        },
        {
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function exampleQuestion($nums, $target) {\n        \n    }\n}",
            "lang": "PHP",
            "langSlug": "php"
        },
        {
            "code": "class Solution {\n    func exampleQuestion(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}",
            "lang": "Swift",
            "langSlug": "swift"
        },
        {
            "code": "class Solution {\n    fun exampleQuestion(nums: IntArray, target: Int): IntArray {\n        \n    }\n}",
            "lang": "Kotlin",
            "langSlug": "kotlin"
        },
        {
            "code": "class Solution {\n  List<int> exampleQuestion(List<int> nums, int target) {\n    \n  }\n}",
            "lang": "Dart",
            "langSlug": "dart"
        },
        {
            "code": "func exampleQuestion(nums []int, target int) []int {\n    \n}",
            "lang": "Go",
            "langSlug": "golang"
        },
        {
            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef example_question(nums, target)\n    \nend",
            "lang": "Ruby",
            "langSlug": "ruby"
        },
        {
            "code": "object Solution {\n    def exampleQuestion(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}",
            "lang": "Scala",
            "langSlug": "scala"
        },
        {
            "code": "impl Solution {\n    pub fn example_question(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}",
            "lang": "Rust",
            "langSlug": "rust"
        },
        {
            "code": "(define/contract (example-question nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )",
            "lang": "Racket",
            "langSlug": "racket"
        },
        {
            "code": "-spec example_question(Nums :: [integer()], Target :: integer()) -> [integer()].\nexample_question(Nums, Target) ->\n  .",
            "lang": "Erlang",
            "langSlug": "erlang"
        },
        {
            "code": "defmodule Solution do\n  @spec example_question(nums :: [integer], target :: integer) :: [integer]\n  def example_question(nums, target) do\n    \n  end\nend",
            "lang": "Elixir",
            "langSlug": "elixir"
        }
    ],
    "content": "(THIS IS HOW QUESTION CONTENT WILL BE VISIBLE)<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than <code>O(n<sup>2</sup>)</code><font face=\"monospace\">&nbsp;</font>time complexity?"
}